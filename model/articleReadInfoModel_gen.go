// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleReadInfoFieldNames          = builder.RawFieldNames(&ArticleReadInfo{})
	articleReadInfoRows                = strings.Join(articleReadInfoFieldNames, ",")
	articleReadInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(articleReadInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleReadInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(articleReadInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleReadInfoModel interface {
		Insert(ctx context.Context, data *ArticleReadInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleReadInfo, error)
		Update(ctx context.Context, data *ArticleReadInfo) error
		Delete(ctx context.Context, id int64) error

		/*AidsAfterDate
		@Description: 获取用户阅读过的文章id列表
		@param uid 用户id
		@param datetime 日期
		@return []int64 文章id列表
		@return error
		*/
		AidsAfterDate(ctx context.Context, uid int64, datetime string) ([]int64, error)
	}

	defaultArticleReadInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleReadInfo struct {
		Id        int64         `db:"id"`
		CreatedAt sql.NullTime  `db:"created_at"`
		Uid       sql.NullInt64 `db:"uid"`
		Aid       sql.NullInt64 `db:"aid"`
	}
)

func newArticleReadInfoModel(conn sqlx.SqlConn) *defaultArticleReadInfoModel {
	return &defaultArticleReadInfoModel{
		conn:  conn,
		table: "`article_read_info`",
	}
}

func (m *defaultArticleReadInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleReadInfoModel) FindOne(ctx context.Context, id int64) (*ArticleReadInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleReadInfoRows, m.table)
	var resp ArticleReadInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleReadInfoModel) Insert(ctx context.Context, data *ArticleReadInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, articleReadInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Aid)
	return ret, err
}

func (m *defaultArticleReadInfoModel) Update(ctx context.Context, data *ArticleReadInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleReadInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Aid, data.Id)
	return err
}

// AidsAfterDate
//
//	@Description: 获取用户阅读过的文章id列表
//	@param uid 用户id
//	@param datetime 日期
//	@return []int64 文章id列表
//	@return error
func (m *defaultArticleReadInfoModel) AidsAfterDate(ctx context.Context, uid int64, datetime string) ([]int64, error) {
	query := fmt.Sprintf("select `aid` from (select * from %s where `uid` = ?;) where `created_at` > ?", m.table)
	var resp []int64
	if err := m.conn.QueryRowCtx(ctx, &resp, query, uid, datetime); err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultArticleReadInfoModel) tableName() string {
	return m.table
}
