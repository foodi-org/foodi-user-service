// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/foodi-org/foodi-user-service/model/modelType/bo"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userInfoFieldNames          = builder.RawFieldNames(&UserInfo{})
	userInfoRows                = strings.Join(userInfoFieldNames, ",")
	userInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userInfoModel interface {
		Insert(ctx context.Context, data *UserInfo) (sql.Result, error)

		TransInsert(ctx context.Context, session sqlx.Session, data *UserInfo) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*UserInfo, error)

		FindByUID(ctx context.Context, uid int64) (*UserInfo, error)

		Update(ctx context.Context, data *UserInfo) error
		Delete(ctx context.Context, id int64) error

		/*UpdateImage
		@Description: 更新用户头像
		*/
		UpdateImage(ctx context.Context, data *bo.UpdateImageBO) error

		TakeWithAid(ctx context.Context, aid int64) (*UserInfo, error)
	}

	defaultUserInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserInfo struct {
		Id        int64          `db:"id"`
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		DeletedAt sql.NullTime   `db:"deleted_at"`
		Uid       sql.NullInt64  `db:"uid"` // 用户id
		Aid       sql.NullInt64  `db:"aid"`
		Name      sql.NullString `db:"name"`       // 用户姓名
		CardType  int64          `db:"card_type"`  // '证件类型'
		CardId    sql.NullString `db:"card_id"`    // 证件号码
		Gender    sql.NullString `db:"gender"`     // 性别
		Age       sql.NullInt64  `db:"age"`        // 用户年龄
		Birthday  sql.NullString `db:"birthday"`   // 用户生日
		Region    sql.NullString `db:"region"`     // 用户所在地区
		WeChatId  sql.NullString `db:"we_chat_id"` // 关联微信id
		Lv        sql.NullInt64  `db:"lv"`         // 用户平台等级
		Vip       sql.NullInt64  `db:"vip"`        // 用户会员等级
		NikeName  sql.NullString `db:"nike_name"`  // 昵称
		Image     sql.NullString `db:"image"`      // 用户头像
	}
)

func newUserInfoModel(conn sqlx.SqlConn) *defaultUserInfoModel {
	return &defaultUserInfoModel{
		conn:  conn,
		table: "`user_info`",
	}
}

func (m *defaultUserInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserInfoModel) FindOne(ctx context.Context, id int64) (*UserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userInfoRows, m.table)
	var resp UserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) FindByUID(ctx context.Context, uid int64) (*UserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `deleted_at` is null and `uid` = ? limit 1", userInfoRows, m.table)
	var resp UserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, uid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) Insert(ctx context.Context, data *UserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Uid, data.Aid, data.Name, data.CardType, data.CardId, data.Gender, data.Age, data.Birthday, data.Region, data.WeChatId, data.Lv, data.Vip, data.NikeName, data.Image)
	return ret, err
}

func (m *defaultUserInfoModel) TransInsert(ctx context.Context, session sqlx.Session, data *UserInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userInfoRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.DeletedAt, data.Uid, data.Aid, data.Name, data.CardType, data.CardId, data.Gender, data.Age, data.Birthday, data.Region, data.WeChatId, data.Lv, data.Vip, data.NikeName, data.Image)
}

func (m *defaultUserInfoModel) Update(ctx context.Context, data *UserInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Uid, data.Aid, data.Name, data.CardType, data.CardId, data.Gender, data.Age, data.Birthday, data.Region, data.WeChatId, data.Lv, data.Vip, data.NikeName, data.Image, data.Id)
	return err
}

// UpdateImage
//
//	@Description: 更新用户头像
//	@param data
//	@return error
func (m *defaultUserInfoModel) UpdateImage(ctx context.Context, data *bo.UpdateImageBO) error {
	query := fmt.Sprintf("update %s set `image` = ? where `id` = ? and `deleted_at` is null", m.table, data.Image, data.Uid)
	_, err := m.conn.ExecCtx(ctx, query)
	return err
}

func (m *defaultUserInfoModel) TakeWithAid(ctx context.Context, aid int64) (*UserInfo, error) {
	query := fmt.Sprintf("select %s from %s where `deleted_at` is null and `aid` = ? limit 1", userInfoRows, m.table)
	var resp UserInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, aid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserInfoModel) tableName() string {
	return m.table
}
