// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLoginInfoFieldNames          = builder.RawFieldNames(&UserLoginInfo{})
	userLoginInfoRows                = strings.Join(userLoginInfoFieldNames, ",")
	userLoginInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userLoginInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLoginInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userLoginInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userLoginInfoModel interface {
		Insert(ctx context.Context, data *UserLoginInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLoginInfo, error)
		Update(ctx context.Context, data *UserLoginInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLoginInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLoginInfo struct {
		Id                    int64         `db:"id"`
		Aid                   sql.NullInt64 `db:"aid"` // 账号id
		LastLogin             sql.NullTime  `db:"last_login"`
		Count                 sql.NullInt64 `db:"count"`
		BuyActionCount        sql.NullInt64 `db:"buy_action_count"`
		NoteActionCount       sql.NullInt64 `db:"note_action_count"`
		ActivityDuration      sql.NullInt64 `db:"activity_duration"`
		ConsecutiveActiveDays sql.NullInt64 `db:"consecutive_active_days"`
	}
)

func newUserLoginInfoModel(conn sqlx.SqlConn) *defaultUserLoginInfoModel {
	return &defaultUserLoginInfoModel{
		conn:  conn,
		table: "`user_login_info`",
	}
}

func (m *defaultUserLoginInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserLoginInfoModel) FindOne(ctx context.Context, id int64) (*UserLoginInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLoginInfoRows, m.table)
	var resp UserLoginInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLoginInfoModel) Insert(ctx context.Context, data *UserLoginInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userLoginInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Aid, data.LastLogin, data.Count, data.BuyActionCount, data.NoteActionCount, data.ActivityDuration, data.ConsecutiveActiveDays)
	return ret, err
}

func (m *defaultUserLoginInfoModel) Update(ctx context.Context, data *UserLoginInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLoginInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Aid, data.LastLogin, data.Count, data.BuyActionCount, data.NoteActionCount, data.ActivityDuration, data.ConsecutiveActiveDays, data.Id)
	return err
}

func (m *defaultUserLoginInfoModel) tableName() string {
	return m.table
}
