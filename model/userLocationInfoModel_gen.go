// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userLocationInfoFieldNames          = builder.RawFieldNames(&UserLocationInfo{})
	userLocationInfoRows                = strings.Join(userLocationInfoFieldNames, ",")
	userLocationInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userLocationInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userLocationInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userLocationInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userLocationInfoModel interface {
		Insert(ctx context.Context, data *UserLocationInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserLocationInfo, error)
		Update(ctx context.Context, data *UserLocationInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserLocationInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserLocationInfo struct {
		Id            int64           `db:"id"`
		Uid           sql.NullInt64   `db:"uid"`
		LocationLabel sql.NullString  `db:"location_label"`
		Tag           sql.NullString  `db:"tag"`
		Description   sql.NullString  `db:"description"`
		Receiver      sql.NullString  `db:"receiver"`
		Phone         sql.NullString  `db:"phone"`
		Longitude     sql.NullFloat64 `db:"longitude"` // 经度
		Latitude      sql.NullFloat64 `db:"latitude"`  // 纬度
	}
)

func newUserLocationInfoModel(conn sqlx.SqlConn) *defaultUserLocationInfoModel {
	return &defaultUserLocationInfoModel{
		conn:  conn,
		table: "`user_location_info`",
	}
}

func (m *defaultUserLocationInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserLocationInfoModel) FindOne(ctx context.Context, id int64) (*UserLocationInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userLocationInfoRows, m.table)
	var resp UserLocationInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserLocationInfoModel) Insert(ctx context.Context, data *UserLocationInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, userLocationInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.LocationLabel, data.Tag, data.Description, data.Receiver, data.Phone, data.Longitude, data.Latitude)
	return ret, err
}

func (m *defaultUserLocationInfoModel) Update(ctx context.Context, data *UserLocationInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userLocationInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.LocationLabel, data.Tag, data.Description, data.Receiver, data.Phone, data.Longitude, data.Latitude, data.Id)
	return err
}

func (m *defaultUserLocationInfoModel) tableName() string {
	return m.table
}
