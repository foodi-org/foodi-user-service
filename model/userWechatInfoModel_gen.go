// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userWechatInfoFieldNames          = builder.RawFieldNames(&UserWechatInfo{})
	userWechatInfoRows                = strings.Join(userWechatInfoFieldNames, ",")
	userWechatInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userWechatInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userWechatInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userWechatInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userWechatInfoModel interface {
		Insert(ctx context.Context, data *UserWechatInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserWechatInfo, error)
		Update(ctx context.Context, data *UserWechatInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserWechatInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserWechatInfo struct {
		Id        int64         `db:"id"`
		DeletedAt sql.NullTime  `db:"deleted_at"`
		Uid       sql.NullInt64 `db:"uid"`
		Aid       sql.NullInt64 `db:"aid"`
	}
)

func newUserWechatInfoModel(conn sqlx.SqlConn) *defaultUserWechatInfoModel {
	return &defaultUserWechatInfoModel{
		conn:  conn,
		table: "`user_wechat_info`",
	}
}

func (m *defaultUserWechatInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserWechatInfoModel) FindOne(ctx context.Context, id int64) (*UserWechatInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userWechatInfoRows, m.table)
	var resp UserWechatInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserWechatInfoModel) Insert(ctx context.Context, data *UserWechatInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userWechatInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Uid, data.Aid)
	return ret, err
}

func (m *defaultUserWechatInfoModel) Update(ctx context.Context, data *UserWechatInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userWechatInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Uid, data.Aid, data.Id)
	return err
}

func (m *defaultUserWechatInfoModel) tableName() string {
	return m.table
}
