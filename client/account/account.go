// Code generated by goctl. DO NOT EDIT.
// Source: foodiUserService.proto

package account

import (
	"context"

	"github.com/foodi-org/foodi-user-service/pb/github.com/foodi-org/foodi-user-service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentRequest    = foodi_user_service.AddCommentRequest
	CreateArticleRequest = foodi_user_service.CreateArticleRequest
	OKReply              = foodi_user_service.OKReply
	RegisterReply        = foodi_user_service.RegisterReply
	RegisterRequest      = foodi_user_service.RegisterRequest
	SaveArticleRequest   = foodi_user_service.SaveArticleRequest
	TokenReply           = foodi_user_service.TokenReply
	TokenRequest         = foodi_user_service.TokenRequest
	UpRequest            = foodi_user_service.UpRequest
	UserDetailReply      = foodi_user_service.UserDetailReply
	UserDetailRequest    = foodi_user_service.UserDetailRequest
	UserReply            = foodi_user_service.UserReply
	UserRequest          = foodi_user_service.UserRequest

	Account interface {
		Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenReply, error) {
	client := foodi_user_service.NewAccountClient(m.cli.Conn())
	return client.Token(ctx, in, opts...)
}

func (m *defaultAccount) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	client := foodi_user_service.NewAccountClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}
