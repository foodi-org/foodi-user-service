// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountInfoFieldNames          = builder.RawFieldNames(&AccountInfo{})
	accountInfoRows                = strings.Join(accountInfoFieldNames, ",")
	accountInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(accountInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(accountInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accountInfoModel interface {
		Insert(ctx context.Context, data *AccountInfo) (sql.Result, error)

		TransInsert(ctx context.Context, session sqlx.Session, data *AccountInfo) (sql.Result, error)

		FindOne(ctx context.Context, id int64) (*AccountInfo, error)

		FindWithPhone(ctx context.Context, phone int64) (*AccountInfo, error)

		Update(ctx context.Context, data *AccountInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AccountInfo struct {
		Id            int64          `db:"id"`
		CreatedAt     sql.NullTime   `db:"created_at"`
		UpdatedAt     sql.NullTime   `db:"updated_at"`
		DeletedAt     sql.NullTime   `db:"deleted_at"`
		Type          sql.NullString `db:"type"`      // 账号类型
		NikeName      sql.NullString `db:"nike_name"` // 昵称
		Image         sql.NullString `db:"image"`     // 用户头像
		Phone         sql.NullInt64  `db:"phone"`
		Password      sql.NullString `db:"password"`
		FirstRegister sql.NullString `db:"first_register"` // 首次注册时间
		LastLogin     sql.NullString `db:"last_login"`     // 上次登录时间
		Verified      sql.NullInt64  `db:"verified"`       // 是否实名认证
		BindWx        sql.NullInt64  `db:"bind_wx"`        // 是否绑定了微信
	}
)

func newAccountInfoModel(conn sqlx.SqlConn) *defaultAccountInfoModel {
	return &defaultAccountInfoModel{
		conn:  conn,
		table: "`account_info`",
	}
}

func (m *defaultAccountInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAccountInfoModel) FindOne(ctx context.Context, id int64) (*AccountInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountInfoRows, m.table)
	var resp AccountInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountInfoModel) FindWithPhone(ctx context.Context, phone int64) (*AccountInfo, error) {
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", accountInfoRows, m.table)
	var resp AccountInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountInfoModel) Insert(ctx context.Context, data *AccountInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Type, data.NikeName, data.Image, data.Phone, data.Password, data.FirstRegister, data.LastLogin, data.Verified, data.BindWx)
	return ret, err
}

func (m *defaultAccountInfoModel) TransInsert(ctx context.Context, session sqlx.Session, data *AccountInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountInfoRowsExpectAutoSet)
	return session.ExecCtx(ctx, query, data.DeletedAt, data.Type, data.NikeName, data.Image, data.Phone, data.Password, data.FirstRegister, data.LastLogin, data.Verified, data.BindWx)
}

func (m *defaultAccountInfoModel) Update(ctx context.Context, data *AccountInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.Type, data.NikeName, data.Image, data.Phone, data.Password, data.FirstRegister, data.LastLogin, data.Verified, data.BindWx, data.Id)
	return err
}

func (m *defaultAccountInfoModel) tableName() string {
	return m.table
}
