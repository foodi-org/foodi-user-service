// Code generated by goctl. DO NOT EDIT.
// Source: foodi-user-service.proto

package server

import (
	"context"

	"github.com/foodi-org/foodi-user-service/github.com/foodi-org/foodi-user-service"
	"github.com/foodi-org/foodi-user-service/internal/logic/user"
	"github.com/foodi-org/foodi-user-service/internal/svc"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	foodi_user_service.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// 获取用户基础信息
func (s *UserServer) BaseInfo(ctx context.Context, in *foodi_user_service.UserRequest) (*foodi_user_service.UserReply, error) {
	l := userlogic.NewBaseInfoLogic(ctx, s.svcCtx)
	return l.BaseInfo(in)
}

// 获取用户详情
func (s *UserServer) DetailInfo(ctx context.Context, in *foodi_user_service.UserDetailRequest) (*foodi_user_service.UserDetailReply, error) {
	l := userlogic.NewDetailInfoLogic(ctx, s.svcCtx)
	return l.DetailInfo(in)
}

// 更新用户头像
func (s *UserServer) UserImage(ctx context.Context, in *foodi_user_service.UserImageRequest) (*foodi_user_service.UserOKReply, error) {
	l := userlogic.NewUserImageLogic(ctx, s.svcCtx)
	return l.UserImage(in)
}

func (s *UserServer) UpdateUserInfo(ctx context.Context, in *foodi_user_service.UpdateUserInfoRequest) (*foodi_user_service.UserOKReply, error) {
	l := userlogic.NewUpdateUserInfoLogic(ctx, s.svcCtx)
	return l.UpdateUserInfo(in)
}
