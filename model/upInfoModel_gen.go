// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/foodi-org/foodi-user-service/model/modelType/bo"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	upInfoFieldNames          = builder.RawFieldNames(&UpInfo{})
	upInfoRows                = strings.Join(upInfoFieldNames, ",")
	upInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(upInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	upInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(upInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	upInfoModel interface {
		Insert(ctx context.Context, data *UpInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UpInfo, error)
		Update(ctx context.Context, data *UpInfo) error
		Delete(ctx context.Context, id int64) error

		/*DelArticleUP
		@Description: 取消文章收藏
		@param bo
		@return error
		*/
		DelArticleUP(ctx context.Context, bo bo.DelBO) error
	}

	defaultUpInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UpInfo struct {
		Id        int64         `db:"id"`
		Uid       sql.NullInt64 `db:"uid"`
		ArticleId sql.NullInt64 `db:"article_id"`
		CommentId sql.NullInt64 `db:"comment_id"`
	}
)

func newUpInfoModel(conn sqlx.SqlConn) *defaultUpInfoModel {
	return &defaultUpInfoModel{
		conn:  conn,
		table: "`up_info`",
	}
}

func (m *defaultUpInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUpInfoModel) FindOne(ctx context.Context, id int64) (*UpInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", upInfoRows, m.table)
	var resp UpInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUpInfoModel) Insert(ctx context.Context, data *UpInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, upInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ArticleId, data.CommentId)
	return ret, err
}

func (m *defaultUpInfoModel) Update(ctx context.Context, data *UpInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, upInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ArticleId, data.CommentId, data.Id)
	return err
}

// DelArticleUP
//
//	@Description: 取消文章收藏
//	@receiver m
//	@param ctx
//	@param bo
//	@return error
func (m *defaultUpInfoModel) DelArticleUP(ctx context.Context, bo bo.DelBO) error {
	query := fmt.Sprintf("delete from %s where `uid` = ? and `article_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, bo.Uid, bo.ArticleID)
	return err
}

func (m *defaultUpInfoModel) tableName() string {
	return m.table
}
