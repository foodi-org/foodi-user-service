// Code generated by goctl. DO NOT EDIT.
// Source: foodi-user-service.proto

package user

import (
	"context"
	foodi_user_service "github.com/foodi-org/foodi-user-service/github.com/foodi-org/foodi-user-service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UserDetailReply   = foodi_user_service.UserDetailReply
	UserDetailRequest = foodi_user_service.UserDetailRequest
	UserImageRequest  = foodi_user_service.UserImageRequest
	UserOKReply       = foodi_user_service.UserOKReply
	UserReply         = foodi_user_service.UserReply
	UserRequest       = foodi_user_service.UserRequest

	User interface {
		// 获取用户基础信息
		BaseInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
		// 获取用户详情
		DetailInfo(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailReply, error)
		// 更新用户头像
		UserImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserOKReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// 获取用户基础信息
func (m *defaultUser) BaseInfo(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	client := foodi_user_service.NewUserClient(m.cli.Conn())
	return client.BaseInfo(ctx, in, opts...)
}

// 获取用户详情
func (m *defaultUser) DetailInfo(ctx context.Context, in *UserDetailRequest, opts ...grpc.CallOption) (*UserDetailReply, error) {
	client := foodi_user_service.NewUserClient(m.cli.Conn())
	return client.DetailInfo(ctx, in, opts...)
}

// 更新用户头像
func (m *defaultUser) UserImage(ctx context.Context, in *UserImageRequest, opts ...grpc.CallOption) (*UserOKReply, error) {
	client := foodi_user_service.NewUserClient(m.cli.Conn())
	return client.UserImage(ctx, in, opts...)
}
