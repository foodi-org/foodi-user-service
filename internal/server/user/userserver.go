// Code generated by goctl. DO NOT EDIT.
// Source: foodiUserService.proto

package server

import (
	"context"

	"github.com/foodi-org/foodi-user-service/internal/logic/user"
	"github.com/foodi-org/foodi-user-service/internal/svc"
	"github.com/foodi-org/foodi-user-service/pb/github.com/foodi-org/foodi-user-service"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	foodi_user_service.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) BaseInfo(ctx context.Context, in *foodi_user_service.UserRequest) (*foodi_user_service.UserReply, error) {
	l := userlogic.NewBaseInfoLogic(ctx, s.svcCtx)
	return l.BaseInfo(in)
}

func (s *UserServer) DetailInfo(ctx context.Context, in *foodi_user_service.UserDetailRequest) (*foodi_user_service.UserDetailReply, error) {
	l := userlogic.NewDetailInfoLogic(ctx, s.svcCtx)
	return l.DetailInfo(in)
}

func (s *UserServer) CreateArticle(ctx context.Context, in *foodi_user_service.CreateArticleRequest) (*foodi_user_service.OKReply, error) {
	l := userlogic.NewCreateArticleLogic(ctx, s.svcCtx)
	return l.CreateArticle(in)
}

func (s *UserServer) AddComment(ctx context.Context, in *foodi_user_service.AddCommentRequest) (*foodi_user_service.OKReply, error) {
	l := userlogic.NewAddCommentLogic(ctx, s.svcCtx)
	return l.AddComment(in)
}

func (s *UserServer) Up(ctx context.Context, in *foodi_user_service.UpRequest) (*foodi_user_service.OKReply, error) {
	l := userlogic.NewUpLogic(ctx, s.svcCtx)
	return l.Up(in)
}

func (s *UserServer) SaveArticle(ctx context.Context, in *foodi_user_service.SaveArticleRequest) (*foodi_user_service.OKReply, error) {
	l := userlogic.NewSaveArticleLogic(ctx, s.svcCtx)
	return l.SaveArticle(in)
}
