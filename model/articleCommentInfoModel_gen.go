// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleCommentInfoFieldNames          = builder.RawFieldNames(&ArticleCommentInfo{})
	articleCommentInfoRows                = strings.Join(articleCommentInfoFieldNames, ",")
	articleCommentInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(articleCommentInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleCommentInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(articleCommentInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	articleCommentInfoModel interface {
		Insert(ctx context.Context, data *ArticleCommentInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleCommentInfo, error)
		Update(ctx context.Context, data *ArticleCommentInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleCommentInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ArticleCommentInfo struct {
		Id             int64          `db:"id"`
		CreatedAt      sql.NullTime   `db:"created_at"`
		UpdatedAt      sql.NullTime   `db:"updated_at"`
		DeletedAt      sql.NullTime   `db:"deleted_at"`
		ArticleId      sql.NullInt64  `db:"article_id"`
		Uid            sql.NullInt64  `db:"uid"`              // 发布评论用户id
		Content        sql.NullString `db:"content"`          // 评论内容
		PostTime       sql.NullTime   `db:"post_time"`        // 发布时间
		ParentId       sql.NullInt64  `db:"parent_id"`        // 父评论id
		FirstCommentId sql.NullInt64  `db:"first_comment_id"` // 回复的起始评论
		UpCount        sql.NullInt64  `db:"up_count"`         // 点赞数
		ReplyCount     sql.NullInt64  `db:"reply_count"`      // 回复此评论的数量
		IsAnonymous    bool           `db:"is_anonymous"`     // 是否匿名
	}
)

func newArticleCommentInfoModel(conn sqlx.SqlConn) *defaultArticleCommentInfoModel {
	return &defaultArticleCommentInfoModel{
		conn:  conn,
		table: "`article_comment_info`",
	}
}

func (m *defaultArticleCommentInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultArticleCommentInfoModel) FindOne(ctx context.Context, id int64) (*ArticleCommentInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleCommentInfoRows, m.table)
	var resp ArticleCommentInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleCommentInfoModel) Insert(ctx context.Context, data *ArticleCommentInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, articleCommentInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.ArticleId, data.Uid, data.Content, data.PostTime, data.ParentId, data.FirstCommentId, data.UpCount, data.ReplyCount, data.IsAnonymous)
	return ret, err
}

func (m *defaultArticleCommentInfoModel) Update(ctx context.Context, data *ArticleCommentInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleCommentInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeletedAt, data.ArticleId, data.Uid, data.Content, data.PostTime, data.ParentId, data.FirstCommentId, data.UpCount, data.ReplyCount, data.IsAnonymous, data.Id)
	return err
}

func (m *defaultArticleCommentInfoModel) tableName() string {
	return m.table
}
